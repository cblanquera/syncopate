/**
 * Syncopate - Turn async to sync in JS
 *
 * @version 0.0.4
 * @author Christian Blanquera <cblanquera@openovate.com>
 * @website https://github.com/cblanquera/syncopate
 * @license MIT
 */
!function(){var t=function(){var t={},e={},n=[],o=[],r=function(){},u=function(){},i=!1,f=t;t.onNext=function(t){return r=t,this},t.onThread=function(t){return u=t,this},t.scope=function(t){return f=t,this},t.stack=function(){return n},t.then=function(t){return n.push(t),i||(i=!0,a.apply(null,o)),this},t.thread=function(t,n){return e[t]=n,this},t.threads=function(){return e};var a=function(){if(!n.length)return i=!1,e=Array.prototype.slice.apply(arguments),void r.call(f,null,n);var t=n.shift(),e=Array.prototype.slice.apply(arguments),o=arguments.callee;e.push(o);var u="function"==typeof setImmediate?setImmediate:setTimeout;u(function(){t.apply(f,e),r.call(f,t,n)})};return a.thread=function(){var t=Array.prototype.slice.apply(arguments),o=t.shift();if(t.push(a),"function"==typeof e[o]){var r="function"==typeof setImmediate?setImmediate:setTimeout;r(function(){e[o].apply(f,t),u.call(f,e[o],n)})}},t};"object"==typeof module&&module.exports?module.exports=t:"function"==typeof define?define(function(){return t}):"function"==typeof jQuery&&"function"==typeof jQuery.extend?jQuery.extend({syncopate:t}):"object"==typeof window&&(window.syncopate=t)}();